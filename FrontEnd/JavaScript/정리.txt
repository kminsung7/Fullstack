* 웹에서 javascript를 사용하는 방법은 다음과 같이 2가지다
  <script> </script> 태그를 이용하는 방법
  일반 요소의 태그 속성에서 이벤트 처리 방식을 사용하는 방법 ex)onclick과 같은 속성

* javascript에서 동등 비교 연산자는 === 이다

* 함수의 선언은 다음과 같이한다
  fucntion 함수명(){}

* javascript의 객체는 다음과 같이 선언 var 객체명 = { }
  중괄호 안에는 프로퍼티(변수)와 메소드(함수)가 들어간다 
  다음과 같이 중괄호 안에서 선언 할 수도 있고
  ex)property(변수) 일 경우 : key : "key값"
     메소드(함수) 일 경우 : 함수명 : function(){}
     객체가 생성 되어 있다면 다음과 같이 중괄호 밖에서 추가 선언 할 수도 있다 
  ex)property(변수) 일 경우 : 객체명.key = "key값"; | 객체명.["key"] = "key 값";
     메소드(함수) 일 경우 : 객체명.함수명 = function(){}

* 객체 선언시 중괄호 내부의 프로퍼티나 메소드는 ','로 구분한다

* 반복문 for(var "변수명" in 객체) {} : 객체의 키가 하나씩 변수명으로 들어가 {} 내의 내용을 실행하고 끝난다
  이를 객체 내의 모든 값을 한번 사용할때 까지 반복한다

* this는 객체 내에서 사용할 경우 그 객체 자체를 가리키고 일반 태그 내에서 사용될경우 그 태그 자체를 가리킨다

* css나 javascript를 외부 파일로 따로 관리하여 태그의 src나 href로 참조하면
  좋은 이유는 코드의 가독성이 좋아지고 범용성도 높아지고 수정도 쉽게 할 수 있다.즉 유지보수성이 좋아진다
  또한 이렇게 하면 웹 페이지 접속시에 서버에 첫째로 html 요청 한뒤 html 해석중에 만나는 css나 javascript파일과 같은   sorce요청이 있을경우 그 수 많큼 서버에 다시 접속해야 하지만 이는 캐시(cache)라는 기능 덕분에 오히려 성능면에서 더 좋아   진다 캐시에 sorce가 저장되어 다음에 다시 그 웹페이지에 접속할 때 다시 서버에 접속하여 요청하지 않고 저장된 캐시를 이용하  기 때문에 서버 트래픽이나 네트워크를 효율적으로 사용할 수 있다   
* jquery는 생산성을 향상 시켜주는 라이브러리다
  사용은 다운로드 받거나 <script></script> 태그 안에 jquery CDN 주소를 입력한다 <-- 서버를 통해서 제공해줌 
